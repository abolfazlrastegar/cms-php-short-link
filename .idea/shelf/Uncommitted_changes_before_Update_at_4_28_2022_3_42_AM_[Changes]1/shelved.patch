Index: database/migrations.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n$config = require('./config/database.php');\r\n$servername = $config['SERVERNAME'];\r\n$username = $config['USERNAME'];\r\n$password = $config['PASSWORD'];\r\n$dbname = $config['DBNAME'];\r\n\r\ntry {\r\n    $conn = new PDO(\"mysql:host=$servername\", $username, $password);\r\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n    $sql_database = \"CREATE DATABASE $dbname\";\r\n\r\n    if ($conn->exec($sql_database)) {\r\n        $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\r\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n        $sql_user = \"CREATE TABLE users (\r\n          id BIGINT(20) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\r\n          username  VARCHAR(50) UNIQUE NOT NULL,\r\n          password TEXT UNIQUE NOT NULL,\r\n          email VARCHAR(50),\r\n          token TEXT UNIQUE NULL,\r\n          end_time_token TIMESTAMP,\r\n          status BOOLEAN DEFAULT 1,\r\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n          )\";\r\n        $conn->exec($sql_user);\r\n\r\n        $sql_links = \"CREATE TABLE links (\r\n          id BIGINT(20) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\r\n          user_id BIGINT UNIQUE,\r\n          url  TEXT NOT NULL,\r\n          short VARCHAR(255)  NOT NULL,\r\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n          )\";\r\n        $conn->exec($sql_links);\r\n    }\r\n    echo \"Database created and Table successfully\";\r\n} catch(PDOException $e) {\r\n    echo $e->getMessage();\r\n}\r\n\r\n$conn = null;\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database/migrations.php b/database/migrations.php
--- a/database/migrations.php	
+++ b/database/migrations.php	
@@ -1,9 +1,8 @@
 <?php
-$config = require('./config/database.php');
-$servername = $config['SERVERNAME'];
-$username = $config['USERNAME'];
-$password = $config['PASSWORD'];
-$dbname = $config['DBNAME'];
+$servername = $_ENV('DB_SERVERNAME');
+$username = $_ENV('DB_USERNAME');
+$password = $_ENV('DB_PASSWORD');
+$dbname = $_ENV('DB_NAME');
 
 try {
     $conn = new PDO("mysql:host=$servername", $username, $password);
Index: database/db.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Database;\r\nuse PDO;\r\n\r\nclass db\r\n{\r\n    private $servername;\r\n    private $username;\r\n    private $password;\r\n    private $dbname;\r\n    protected $db;\r\n\r\n    public function __construct()\r\n    {\r\n        $config = require('./config/database.php');\r\n        $this->servername = $config['SERVERNAME'];\r\n        $this->username = $config['USERNAME'];\r\n        $this->password = $config['PASSWORD'];\r\n        $this->dbname = $config['DBNAME'];\r\n        try {\r\n            $conn = new PDO(\"mysql:host=$this->servername;dbname=$this->dbname\", $this->username, $this->password);\r\n            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n            $this->db = $conn;\r\n        } catch (PDOException $e) {\r\n            echo \"Connection failed: \" . $e->getMessage();\r\n        }\r\n    }\r\n\r\n    public function connection () {\r\n        return $this->db;\r\n    }\r\n\r\n    public function insert(string $name_table, array $column)\r\n    {\r\n        $db = $this->db;\r\n        $key = array_keys($column);\r\n        $value = array_values($column);\r\n        $sql = \"INSERT INTO $name_table (`\" . implode(\"`, `\", $key) . \"`) \" . \"VALUES ('\" . implode(\"', '\", $value) . \"')\";\r\n        $db->exec($sql);\r\n        $result = $db->lastInsertId();\r\n        $db = null;\r\n        return $result;\r\n    }\r\n\r\n\r\n    public function select($name_table, $column = '*', $where = 1)\r\n    {\r\n        $db = $this->db;\r\n        if (is_array($column))\r\n            $column = str_replace(' ', ', ', implode(\" \", $column));\r\n        $where = $this->make($where, 'AND ');\r\n\r\n        $sql = \"SELECT $column FROM `$name_table` WHERE $where\";\r\n        $query = $db->query($sql, PDO::FETCH_ASSOC);\r\n        $db = null;\r\n        return $query->fetchAll();\r\n    }\r\n\r\n\r\n    public function update(string $name_table, int $id, array $column)\r\n    {\r\n        $db = $this->db;\r\n        $column = $this->make($column, ',');\r\n        $sql = \"UPDATE `$name_table` SET $column WHERE `id` = $id\";\r\n        $query = $db->prepare($sql);\r\n        $result = $query->execute();\r\n        $db = null;\r\n        return $result;\r\n    }\r\n\r\n\r\n    public function delete($name_table, $column)\r\n    {\r\n        $db = $this->db;\r\n        $column = $this->make($column, ',');\r\n        $sql = \"DELETE FROM `$name_table` WHERE $column\";\r\n        $result = $db->exec($sql);\r\n        $db = null;\r\n        return $result;\r\n    }\r\n\r\n\r\n    private function make($params, $replace)\r\n    {\r\n        $data = [];\r\n        if (is_array($params)) {\r\n            foreach ($params as $key => $value) {\r\n                $data[] = \"$key='$value'\";\r\n            }\r\n            return str_replace(\" \", \"$replace\", implode(\" \", $data));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database/db.php b/database/db.php
--- a/database/db.php	
+++ b/database/db.php	
@@ -13,11 +13,10 @@
 
     public function __construct()
     {
-        $config = require('./config/database.php');
-        $this->servername = $config['SERVERNAME'];
-        $this->username = $config['USERNAME'];
-        $this->password = $config['PASSWORD'];
-        $this->dbname = $config['DBNAME'];
+        $this->servername = $_ENV('DB_SERVERNAME');
+        $this->username = $_ENV('DB_USERNAME');
+        $this->password = $_ENV('DB_PASSWORD');
+        $this->dbname = $_ENV('DB_NAME');
         try {
             $conn = new PDO("mysql:host=$this->servername;dbname=$this->dbname", $this->username, $this->password);
             $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
Index: .env
===================================================================
diff --git a/.env b/.env
new file mode 100644
--- /dev/null	
+++ b/.env	
@@ -0,0 +1,4 @@
+DB_SERVERNAME='localhost',
+DB_USERNAME='root',
+DB_NAME='short_links',
+DB_PASSWORD=
\ No newline at end of file
